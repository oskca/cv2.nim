[n.global]
output="src/cv2"


[n.include]
headers

# [n.exclude]

[n.prepare]
execute = "rm -rf headers"
execute.2 = "cp -r /usr/local/include/opencv2 headers"

[n.wildcard]
wildcard = "*.hpp"
preprocess = true
defines = true
flags="--cpp --nep1"
ppflags = "-DCV_CXX11=0 -DCV_CXX_STD_ARRAY=0 -DOPENCV_ABI_COMPATIBILITY=301"

[headers/core/types.hpp]
regex.1 = """(?s:template\<typename _Tp\> class DataType.*?vec_type;\n};)"""
replace.1 = ""

regex.2 = """(?s:namespace traits .*? // namespace)"""
replace.2 = ""

regex.3 = """(?s:template\<\> class DataType<.*?>.*?vec_type;\n};)"""
replace.3 = ""

regex.4 = """(?s:Implementation.*)"""
replace.4 = ""

append = "\n}\n#endif"

[types.nim]
search.1 = "ValueType* = Tp"
replace.1 = ""

search.2 = "Complexd* = Complex[cdouble]"
append.2 = """

  Vec* {.importcpp: "cv::Vec", header: headertypes, bycopy.}[Tp:any, Tp2:static[int]] = object of RootObj
  Vector* {.importcpp: "std::vector".} [Tp] = object"""

search.3 = """

  Size* {.importcpp: "cv::Size_", header: headertypes, bycopy.}[Tp] = object
    width* {.importc: "width".}: Tp
    height* {.importc: "height".}: Tp"""
move.3 = "Complexd* = Complex[cdouble]"

search.4 = """

  Rect* {.importcpp: "cv::Rect_", header: headertypes, bycopy.}[Tp] = object
    x* {.importc: "x".}: Tp
    y* {.importc: "y".}: Tp
    width* {.importc: "width".}: Tp
    height* {.importc: "height".}: Tp"""
move.4 = "Complexd* = Complex[cdouble]"

regex.5 = """(\w+\* = \w+2i)"""
replace.5 = ""

search.6 = "Scalar* = Scalar[cdouble]"
replace.6 = ""

search.7 = "vector[cint]"
replace.7 = "Vector[cint]"

search.8 = "COUNT = 1, MAX_ITER = count, EPS = 2"
replace.8 = "COUNT = 1, EPS = 2"

[headers/core/mat.hpp]
ppflags = "-DCV_CXX11=0 -DCV_CXX_STD_ARRAY=0"

regex.1 = """(?s:class CV_EXPORTS _OutputArray;.*CV_EXPORTS InputOutputArray noArray\(\);)"""
replace.1 = ""

search.2 = "typedef typename"
comment.2 = 1

search.3 = """template<int n> explicit Mat_(const Vec<typename"""
comment.3 = 4

search.4 = "template<int n> operator Vec<typena"
comment.4 = 3

search.5 = "CV_EXPORTS MatExpr operator != "
comment.5 = 11


[headers/core.hpp]
search.1 = "CV_Assert(fs.isOpened());"
comment.1 = 1

search.2 = "FileStorage fs(strModel, FileStorage::READ + FileStorage::MEMORY);"
comment.2 = 1

regex.3 = "(?s:template<> struct ParamType.*};)"
replace.3 = ""

[n.sourcefile]
headers/imgcodecs.hpp
headers/highgui.hpp

[headers/imgproc.hpp]
preprocess = true
defines = true

search.1 = "inline\nuchar* LineIterator::operator *()"
comment.1 = 31

[headers/videoio.hpp]
search.1 = "template<> CV_EXPORTS void DefaultDeleter"
comment.1 = 2

[headers/tracking/tracker.hpp]
search.1 = "public virtual Algorithm"
replace.1 = "public Algorithm"
