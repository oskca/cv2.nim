[n.global]
output="src/cv2"


[n.include]
headers
# /usr/local/include
# /usr/local/include/opencv2/core
# /usr/local/include/opencv2

# [n.exclude]

[n.prepare]
# copy = "/usr/local/include/opencv2=headers"
execute = "cp -r /usr/local/include/opencv2 headers"

[n.wildcard]
wildcard = "*.hpp"
preprocess = true
defines = true
flags="--cpp --nep1"

[n.sourcefile]
headers/imgcodecs.hpp
headers/highgui.hpp

[headers/core.hpp]
search.1 = "CV_Assert(fs.isOpened());"
comment.1 = 1

search.2 = "FileStorage fs(strModel, FileStorage::READ + FileStorage::MEMORY);"
comment.2 = 1

regex.3 = "(?s:template<> struct ParamType.*};)"
replace.3 = ""

[headers/imgproc.hpp]
preprocess = true
defines = true

search.1 = "inline\nuchar* LineIterator::operator *()"
comment.1 = 31

[headers/videoio.hpp]
search.1 = "template<> CV_EXPORTS void DefaultDeleter"
comment.1 = 2

[headers/tracking/tracker.hpp]
search.1 = "public virtual Algorithm"
replace.1 = "public Algorithm"

[headers/core/mat.hpp]
ppflags = "-DCV_CXX11=0 -DCV_CXX_STD_ARRAY=0"

regex.1 = """(?s:class CV_EXPORTS _OutputArray;.*CV_EXPORTS InputOutputArray noArray\(\);)"""
replace.1 = ""

search.2 = "typedef typename"
comment.2 = 1

search.3 = """template<int n> explicit Mat_(const Vec<typename"""
comment.3 = 4

search.4 = "template<int n> operator Vec<typena"
comment.4 = 3

search.5 = "CV_EXPORTS MatExpr operator != "
comment.5 = 11
